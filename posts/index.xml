<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 自在生活</title>
    <link>https://www.at719.com/posts/</link>
    <description>Recent content in Posts on 自在生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://www.at719.com&#34;&gt;at719&lt;/a&gt; 2018</copyright>
    <lastBuildDate>Sun, 12 May 2019 20:33:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.at719.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mac系统下快捷键</title>
      <link>https://www.at719.com/posts/mac_shortcuts/</link>
      <pubDate>Sun, 12 May 2019 20:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/mac_shortcuts/</guid>
      <description>##跳转
跳转到一行的开头：Command+左箭头
跳转到一行的末尾：Command+右箭头
跳转到当前单词的开头(适合英文、拼音)：Option+左箭头
跳转到当前单词的末尾(适合英文、拼音)：Option+右箭头
跳转到全部文本的开头：Command+上箭头
跳转到全部文本的末尾：Command+下箭头
在以上快捷键中加入Shift，则可以扩展成为选中文本效果的快捷键：
选中光标到本行开头的文本：Shift+Command+左箭头
选中光标到本行末尾的文本：Shift+Command+右箭头
选中光标到当前单词的开头(适合英文、拼音)：Shift+Option+左箭头
选中光标到当前单词的末尾(适合英文、拼音)：Shift+Option+右箭头
选中光标到全部文本的开头：Shift+Command+上箭头
选中光标到全部文本的末尾：Shift+Command+下箭头
OS X 文本编辑常用快捷键 移动光标快捷键 Control-F 光标前进一个字符，相当于右键（F = Forward）
Control-B 光标后退一个字符，相当于左键（B = Backward）
Control-P 上移一行，相当于上键（P = Previous）
Control-N 下移一行，相当于下键（N = Next）
Control-A 移动到一行的开头（A = Ahead）
Control-E 移动到一行的结尾（E = End）
文字删除快捷键 Control-H 删除光标前面的字符
Control-D 删除光标后面的字符
Control-K 删除从光标开始，到一行结尾的所有字符
文字选择快捷键 Control-Shift-A 选中从光标开始，到一行开头的所有文字
Control-Shift-E 选中从光标开始，到一行结尾的所有文字</description>
    </item>
    
    <item>
      <title>Ubuntu使用</title>
      <link>https://www.at719.com/posts/ubuntu/</link>
      <pubDate>Wed, 01 May 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/ubuntu/</guid>
      <description>常用快捷键 桌面常用快捷键 Alt + F1：聚焦到桌面左侧任务导航栏，可按上下键进行导航
Alt + F2：运行命令
Alt + F4：关闭当前窗口
Alt + Tab：切换程序窗口
Alt + 空格：打开窗口菜单
PrtSc：桌面截图
Win + A：搜索/浏览程序
Win + F：搜索/浏览文件
Win + M：搜索/浏览音乐文件
Win：搜索/浏览程序、文件、音乐文件等
常见终端快捷键 Ctrl + Alt + T：打开终端
Tab：命令或文件名自动补全
Ctrl + Shift + C：复制
Ctrl + Shift + V：粘贴
Ctrl + Shift + T：在同一个窗口新建终端标签页
Ctrl + Shift + W：关闭标签页
Ctrl + Shift + N：新建终端窗口
Ctrl + Shift + Q：关闭终端窗口
Ctrl + Shift + PageUp：标签页左移</description>
    </item>
    
    <item>
      <title>VIM</title>
      <link>https://www.at719.com/posts/vim/</link>
      <pubDate>Wed, 01 May 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/vim/</guid>
      <description>常用工具 ctrlsf.vim 快速全局搜索关键字 t - 在新tab打开选中文件
p - 预览
P - Like Enter but open file in a preview window and switch focus to it.
O - Like Enter but always leave CtrlSF window opening.
T - Like t but focus CtrlSF window instead of new opened tab.
M - Switch result window between normal view and compact view.
q - 关闭搜索窗口
 - Move cursor to next match.下一个选中</description>
    </item>
    
    <item>
      <title>Javascript杂物柜</title>
      <link>https://www.at719.com/posts/javascript_memo/</link>
      <pubDate>Thu, 11 Apr 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/javascript_memo/</guid>
      <description>Date Date.now()当前unix时间戳(毫秒) var a = Date.now() console.log(a) VM789:2 1555030834615  数组 every()： 对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。
var a = [1,2,3] console.log(a.every(function(item) { return item &amp;gt; 0})) console.log(a.every(function(item) { return item &amp;gt; 1})) // 输出 true false  filter()： 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。
var a = [1,2,3] console.log(a.filter(function(item) { return item &amp;gt; 0})) console.log(a.filter(function(item) { return item &amp;gt; 1})) // 输出 [1, 2, 3] [2, 3]  forEach()： 对数组中的每一项运行给定函数。这个方法没有返回值。
var a = [1,2,3] console.log(a.forEach(function(item) { console.log(item)})) // 输出 1 2 3  map()： 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</description>
    </item>
    
    <item>
      <title>Golang杂物柜</title>
      <link>https://www.at719.com/posts/golang_memo/</link>
      <pubDate>Wed, 10 Apr 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/golang_memo/</guid>
      <description>类型 rune byte 等同于 int8，常用来处理 ascii 字符，
rune 等同于 int32,常用来处理 unicode 或 utf-8 字符 golang 中中文字符在 unicode 下占 2 个字节，在 utf-8 编码下占 3 个字节，而 golang 默认编码正好是 utf-8。
len(&amp;quot;中国&amp;quot;) --&amp;gt; 6  数组 声明数组 var arr [3]string  初始化数组 var arr= [3]string{&amp;quot;i&amp;quot;，&amp;quot;love&amp;quot;,&amp;quot;you&amp;quot;} 或者 var arr= [...]string{&amp;quot;i&amp;quot;，&amp;quot;love&amp;quot;,&amp;quot;you&amp;quot;}  遍历数组 var arr= [...]string{&amp;quot;i&amp;quot;，&amp;quot;love&amp;quot;,&amp;quot;you&amp;quot;} for k,v := range arr { }  切片 结构体 不同结构体变量的字段是独立，互不影响，一个结构体变量字段的更改，不影响另外一个, 结构体是值类型
Golang 继承是通过匿名字段来实现。Golang 面向对象(OOP)很优雅，OOP 本身就是语言类型系统(typesystem)的一部分，通过接口 (interface)关联，耦合性低，也非常灵活。
 继承  在 Golang 中，如果一个 struct 嵌套了另一个匿名结构体，那么这个结构体可以直接访 问匿名结构体的字段和方法，从而实现了继承特性。一般在 golang 中不叫继承而叫组合</description>
    </item>
    
    <item>
      <title>chrome web调试总结</title>
      <link>https://www.at719.com/posts/console_memo1/</link>
      <pubDate>Mon, 08 Apr 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/console_memo1/</guid>
      <description>日常 console 调试使用笔记
console.log() 日志打印
打印字符串 %s
打印对象 %o 可展开的 DOM %O 列出 DOM 的属性
打印整数 %d or %i
打印浮点数 %f
console.clear() 清空控制台
console.dir() 和 console.log 类似 截图可以对比查看对象的不同
getEventListeners(document.getElementById(&amp;lsquo;id&amp;rsquo;)) 获取绑定在指定 dom 上的事件集
monitorEvents监控事件 如果希望在执行绑定到 DOM 中特定元素的事件时监视它们，也可以在控制台中这样做。你可以使用不同的命令来监控其中的一些或所有事件: 如果希望在执行绑定到DOM中特定元素的事件时监视它们，也可以在控制台中这样做。你可以使用不同的命令来监控其中的一些或所有事件:
monitorEvents($(‘selector’)) 将监视与选择器的元素关联的所有事件，然后在它们被触发时将它们打印到控制台。例如，monitore($(#firstName)) 将打印 ID 为 firstName元素的所有事件。
monitorEvents($(‘selector’),’eventName’) 将打印与元素绑定的特定事件。 你可以将事件名称作为参数传递给函数。 这将仅记录绑定到特定元素的特定事件。 例如，monitorEvents($(‘#firstName’),’click’) 将打印绑定到ID为&amp;rsquo;firstName&amp;rsquo;的元素的所有 click 事件。
monitore($(selector)，[eventName1, eventName3&amp;rsquo;， .])将根据您自己的需求记录多个事件。与其传递单个事件名作为参数，不如传递包含所有事件的字符串数组。例如monitore($(#firstName)，[click, focus])将记录与ID firstName元素绑定的 click事件和focus事件。
unmonitorevent ($(selector)):这将停止监视和打印控制台中的事件。</description>
    </item>
    
    <item>
      <title>根据手势上下方向，显示或隐藏部分内容(vue)</title>
      <link>https://www.at719.com/posts/blog_vue_1/</link>
      <pubDate>Mon, 26 Nov 2018 17:48:39 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/blog_vue_1/</guid>
      <description>如图
&amp;lt;template&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;menu&amp;quot; v-bind:class=&amp;quot;{&#39;menu-show&#39;: showmenu, &#39;menu-hide&#39;: !showmenu }&amp;quot; &amp;gt; &amp;lt;button&amp;gt;button1&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;button2&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;button3&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;button4&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;button5&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;button6&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot; id=&amp;quot;myscroller&amp;quot; ref=&amp;quot;myscroller&amp;quot; @touchmove=&amp;quot;touchMove($event)&amp;quot; &amp;gt; &amp;lt;div class=&amp;quot;item&amp;quot; v-for=&amp;quot;(item,index) in 20&amp;quot; v-bind:key=&amp;quot;index&amp;quot;&amp;gt;{{item}}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; // import HelloWorld from &#39;./components/HelloWorld.vue&#39; export default { name: &#39;app&#39;, components: { // HelloWorld }, data () { return { showmenu:true } }, methods : { /* eslint-disable no-console */ touchMove () { console.log(&#39;touchMove&#39;) console.log(this.$refs.myscroller.scrollTop) let offset = this.</description>
    </item>
    
    <item>
      <title>tab切换,延迟自定义组件的初始化</title>
      <link>https://www.at719.com/posts/blog_vue_1543203978/</link>
      <pubDate>Mon, 26 Nov 2018 11:46:18 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/blog_vue_1543203978/</guid>
      <description>首次加载web时希望减少加载时间，提高用户友好体验 假如我有5个tab 每个tab分别对应一个自定义组件 我希望第一次加载时先加载默认显示的组件 其余组件延迟加载等用户切换时在显示并处理自定义组件里的事件，
&amp;lt;template&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot; &amp;gt; &amp;lt;div class=&amp;quot;app-main&amp;quot;&amp;gt; &amp;lt;component v-bind:is=&amp;quot;tabComponent0&amp;quot; :show=&amp;quot;(tabIndex == 0)&amp;quot; ref=&amp;quot;x1&amp;quot; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;component v-bind:is=&amp;quot;tabComponent1&amp;quot; :show=&amp;quot;(tabIndex == 1)&amp;quot; ref=&amp;quot;x2&amp;quot; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;component v-bind:is=&amp;quot;tabComponent2&amp;quot; :show=&amp;quot;(tabIndex == 2)&amp;quot; ref=&amp;quot;x3&amp;quot; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;component v-bind:is=&amp;quot;tabComponent3&amp;quot; :show=&amp;quot;(tabIndex == 3)&amp;quot; ref=&amp;quot;x4&amp;quot; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;component v-bind:is=&amp;quot;tabComponent4&amp;quot; :show=&amp;quot;(tabIndex == 4)&amp;quot; ref=&amp;quot;x5&amp;quot; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;xfooter v-on:tabSwitch=&amp;quot;onTabSwitch&amp;quot; &amp;gt;&amp;lt;/xfooter&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; const x1 = () =&amp;gt; import(&#39;@/page/friend/x1.vue&#39;) const x2 = () =&amp;gt; import(&#39;@/page/friend/x2.vue&#39;) const x3 = () =&amp;gt; import(&#39;@/page/friend/x3.</description>
    </item>
    
    <item>
      <title>非ROOT权限运行nginx并访问1024以下端口</title>
      <link>https://www.at719.com/posts/first/</link>
      <pubDate>Mon, 19 Nov 2018 14:46:18 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/first/</guid>
      <description>一般linux环境下，使用nginx并访问1024以下的端口,需要使用root权限，自己不愿意使用root权限
查了查使用iptables转发端口的方式解决
解决步骤 使用iptables建立端口映射 比如443映射到1234 iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 1234  修改nginx配置 注意 红框的那行代码,off的情况下跳转才不带端口 详情自己查nginx文档</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://www.at719.com/posts/git_memo/</link>
      <pubDate>Tue, 10 Apr 2018 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/git_memo/</guid>
      <description>标签 列出已有的标签 git tag
模糊查询 tag git tag -l &amp;lsquo;tagName*&amp;lsquo;
附注标签 git tag -a &amp;lt;tagName&amp;gt; -m &amp;lsquo;comment&amp;rsquo;
显示指定标签的信息 git show &amp;lt;tagName&amp;gt;
过去的提交打标签 git tag -a v1.2 9fceb02 // 末尾指定提交的校验和（或部分校验和)
推送标签到远程 git push origin &amp;lt;tagName&amp;gt; // 单个 git push origin &amp;ndash;tags // 所有本地
删除本地标签 git tag -d &amp;lt;tagName&amp;gt;
删除远程标签 git push origin :refs/tags/&amp;lt;tagName&amp;gt;
根据特定标签创建新分支 git checkout -b &amp;lt;branchName&amp;gt; &amp;lt;tagName&amp;gt;
历史 查看提交历史 git log &amp;ndash;pretty=oneline
分支 分支创建 git branch testing
删除远程分支 git push origin &amp;ndash;delete &amp;lt;branchName&amp;gt;</description>
    </item>
    
  </channel>
</rss>