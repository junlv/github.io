<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on 自在生活</title>
    <link>https://www.at719.com/tags/design/</link>
    <description>Recent content in Design on 自在生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://www.at719.com&#34;&gt;at719&lt;/a&gt; 2018</copyright>
    <lastBuildDate>Sat, 20 Jul 2019 09:33:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.at719.com/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microservice微服务</title>
      <link>https://www.at719.com/posts/microservice/</link>
      <pubDate>Sat, 20 Jul 2019 09:33:00 +0000</pubDate>
      
      <guid>https://www.at719.com/posts/microservice/</guid>
      <description>微服务概念 微服务就是一些协同工作的小而自治的服务，每个服务强调按照内聚性，单一职责原则（把因相同原因而变化的东西聚合到一起，而把因不同原因而变化的东西分离开来），微服务将这个理念应用在独立的服务上；根据业务的边界来确定服务的边界，这样就很容易确定某个功能代码应该放在哪里
微服务强调【自治性】 服务之间均通过网络调用进行通信，从而加强了服务之间的隔离性，避免紧耦合；这些服务应该可以彼此间独立进行修改，并且某一个服务的部署不应该引起该服务消费方的变动。对于一个服务来说，我们需要考虑的是什么应该暴露，什么应该隐藏。如果暴露得过多，那么服务消费方会与该服务的内部实现产生耦合。这会使得服务和消费方之间产生额外的协调工作，从而降低服务的自治性。
服务会暴露出 API（Application Programming Interface，应用编程接口），然后服务之间通过这些 API 进行通信。API 的实现技术应该避免与消费方耦合，这就意味着应该选择与具体技术不相关的 API 实现方式，以保证技术的选择不被限制</description>
    </item>
    
  </channel>
</rss>